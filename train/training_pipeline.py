"""Training Pipeline

Train machine learning models based on historical OHLCV data (CSV) generated by data_loader.
"""

import os
from pathlib import Path
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestClassifier
import joblib

DATA_DIR = Path("data/")
MODEL_DIR = Path("models/")
MODEL_DIR.mkdir(exist_ok=True)

def load_data(symbol: str, interval: str = "1d") -> pd.DataFrame:
    """Load OHLCV data for a specific symbol and interval."""
    file_path = DATA_DIR / f"{symbol}_{interval}.csv"
    if not file_path.exists():
        raise FileNotFoundError(f"Data file {file_path} does not exist")
    
    df = pd.read_csv(file_path, parse_dates=["date"], index_col="date")
    return df

def feature_engineering(df: pd.DataFrame) -> pd.DataFrame:
    """Basic feature engineering on OHLCV data."""
    df['returns'] = df['Close'].pct_change()
    df['volatility'] = df['returns'].rolling(window=5).std()
    df['sma_5'] = df['Close'].rolling(window=5).mean()
    df['sma_10'] = df['Close'].rolling(window=10).mean()
    df['target'] = (df['returns'].shift(-1) > 0).astype(int)
    df = df.dropna()
    return df

def train_model(df: pd.DataFrame) -> RandomForestClassifier:
    """Train a random forest classifier on OHLCV features."""
    features = ['Open', 'High', 'Low', 'Close', 'Volume', 'returns', 'volatility', 'sma_5', 'sma_10']
    X = df[features]
    y = df['target']

    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, shuffle=False)

    model = RandomForestClassifier(n_estimators=100, random_state=42)
    model.fit(X_train, y_train)

    train_score = model.score(X_train, y_train)
    test_score = model.score(X_test, y_test)
    print(f"Train Accuracy: {train_score:.4f} | Test Accuracy: {test_score:.4f}")

    return model

def save_model(model: RandomForestClassifier, symbol: str, interval: str = "1d") -> None:
    """Save trained model to disk."""
    model_path = MODEL_DIR / f"{symbol}_{interval}_model.pkl"
    joblib.dump(model, model_path)
    print(f"Model saved to {model_path}")

def run_training(symbol: str, interval: str = "1d"):
    """Full training pipeline."""
    df = load_data(symbol, interval)
    df = feature_engineering(df)
    model = train_model(df)
    save_model(model, symbol, interval)

if __name__ == "__main__":
    # Example usage
    run_training(symbol="AAPL", interval="1d")
